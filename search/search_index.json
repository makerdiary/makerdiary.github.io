{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"What's New","text":"<ul> <li> <p>Introducing nRF Cloud</p> <p>nRF Cloud offers a suite of services optimized for Nordic ultra-low power wireless devices that supports your IoT deployment throughout its entire lifecycle.</p> <p> Mar 11, 2025 \u30fb  4 min read</p> </li> <li> <p></p> <p>Introducing Interface MCU</p> <p>The Interface MCU simplifies debugging and programming of the nRF9151 SiP without external tools and provides access to board-specific features.</p> <p> Mar 10, 2025 \u30fb  3 min read</p> </li> <li> <p></p> <p>nRF9151 Connect Kit is Here!</p> <p>Today we are excited to launch our latest IoT prototyping kit, the nRF9151 Connect Kit, for LTE-M, NB-IoT, DECT NR+, and GNSS applications.</p> <p> Mar 07, 2025 \u30fb  4 min read</p> </li> </ul> <p>View all</p>"},{"location":"products/accessories/","title":"Accessories","text":"<p>Essential add-ons for open-source hardware, from sensors to expansion boards, to power your projects and fuel innovation.</p> <ul> <li> <p></p> <p>M60 Mechanical Keyboard Plate</p> <p>Buy now</p> <p>Documentation</p> </li> <li> <p></p> <p>Pitaya-Link CMSIS-DAP Debug Probe</p> <p>Buy now</p> <p>Documentation</p> </li> <li> <p></p> <p>Base Dock (Grove Compatible)</p> <p>Buy now</p> <p>Documentation</p> </li> </ul>"},{"location":"products/modules/","title":"Modules","text":"<p>Our modules seamlessly integrate into processes of any scale, delivering tailored efficiency and innovation for your unique industry needs.</p> <ul> <li> <p></p> <p>nRF52840 M.2 Module</p> <p>Buy now</p> <p>Documentation</p> </li> </ul>"},{"location":"products/prototyping-kits/","title":"Prototyping Kits","text":"<p>Our prototyping kits make it easy to take your idea from sketch into proof-of-concept.</p> <ul> <li> <p></p> <p>nRF9151 Connect Kit</p> <p>Buy now</p> <p>Documentation</p> </li> <li> <p></p> <p>iMX RT1011 Nano Kit</p> <p>Buy now</p> <p>Documentation</p> </li> <li> <p></p> <p>nRF52840 Connect Kit</p> <p>Buy now</p> <p>Documentation</p> </li> <li> <p></p> <p>Pitaya Go nRF52840 WiFi IoT Board</p> <p>Buy now</p> <p>Documentation</p> </li> <li> <p></p> <p>nRF52840 MDK USB Dongle w/ Case</p> <p>Buy now</p> <p>Documentation</p> </li> <li> <p></p> <p>nRF52840 MDK USB Dongle</p> <p>Buy now</p> <p>Documentation</p> </li> <li> <p></p> <p>M60 Mechanical Keyboard PCBA</p> <p>Buy now</p> <p>Documentation</p> </li> <li> <p></p> <p>nRF52840 M.2 Developer Kit</p> <p>Buy now</p> <p>Documentation</p> </li> <li> <p></p> <p>nRF52840-MDK IoT Development Kit</p> <p>Buy now</p> <p>Documentation</p> </li> <li> <p></p> <p>nRF52832-MDK V2 IoT Development Kit</p> <p>Buy now</p> <p>Documentation</p> </li> <li> <p></p> <p>nRF52832-MDK IoT Development Kit</p> <p>Buy now</p> <p>Documentation</p> </li> <li> <p></p> <p>Grove Mesh Kit for nRF52840-MDK</p> <p>Buy now</p> <p>Documentation</p> </li> </ul>"},{"location":"updates/","title":"Latest Updates","text":""},{"location":"updates/documentation-updated-for-nrf52840-mdk-usb-dongle/","title":"Documentation Updated for nRF52840 MDK USB Dongle","text":"<p>The first commit to the <code>makerdiary/nrf52840-mdk-usb-dongle</code> repository was on Sep 27, 2018. Five years later, nRF52840 MDK USB Dongle has become one of the most popular, open-source nRF52840-based hardware today.</p> <p>We are excited to announce that Documentation v2.0.0 is now available! There are many updates in this version that we hope you'll like, some of the key highlights include:</p> <ul> <li>Updated Quick Start Guide - Provide a quick introduction to using nRF Connect Bluetooth Low Energy app to demonstrate Bluetooth Low Energy connectivity.</li> <li>Migrated to nRF Connect SDK - nRF Connect SDK is the latest software development kit for building products based on Nordic Semiconductor's chips. We provide an extensive set of documentation and samples to help you getting started.</li> <li>Added nRF Sniffer for Bluetooth LE - This is a useful tool for debugging and learning about Bluetooth Low Energy applications.</li> <li>Added nRF Sniffer for 802.15.4 - This is a tool for learning about and debugging applications that are using protocols based on IEEE 802.15.4, such as Thread and Zigbee.</li> <li>Updated OpenSK - There are many updates since we landed OpenSK. Now you can try the latest OpenSK firmware, even build your own's.</li> </ul> <p>What's still missing from the updates? Feel free to share your ideas in the Discussions. Together, we can make this project better!</p> <p>Last but certainly not least, a big Thank You to the contributors of this project.</p>"},{"location":"updates/getting-started-with-google-opensk/","title":"Getting started with Google OpenSK","text":""},{"location":"updates/getting-started-with-google-opensk/#getting-started-with-google-opensk","title":"Getting started with Google OpenSK","text":""},{"location":"updates/getting-started-with-google-opensk/#introduction","title":"Introduction","text":"<p>OpenSK released by Google is a fully open-source implementation for security keys written in Rust that supports both FIDO U2F and FIDO2 standards.</p> <p>OpenSK is based on the FIDO2 specifications, which combine the World Wide Web Consortium\u2019s (W3C) Web Authentication (WebAuthn) specification and FIDO Alliance\u2019s corresponding Client-to-Authenticator Protocol (CTAP).</p> <p>The nRF52840 MDK USB Dongle works well with OpenSK. Taking advantage of the UF2 Bootloader, you can easily program the OpenSK by just copying the <code>.uf2</code>-format image to the flash drive.</p> <p>This guide details how to get started with the OpenSK using the nRF52840 MDK USB Dongle without going through the complete toolchain installation.</p>"},{"location":"updates/getting-started-with-google-opensk/#what-youll-need","title":"What you'll need","text":"<ul> <li>An nRF52840 MDK USB Dongle</li> <li>Latest version of Google Chrome browser (or at least version 38) or Firefox browser</li> </ul>"},{"location":"updates/getting-started-with-google-opensk/#flash-prebuilt-opensk-via-uf2-bootloader","title":"Flash prebuilt OpenSK via UF2 Bootloader","text":"<p>The prebuilt OpenSK firmware is located in firmware/OpenSK with the <code>.uf2</code>-format.</p> <p>Enter DFU mode by holding the dongle's RESET/USR button during connecting to your PC. A flash drive with the name MDK-DONGLE will appear.</p> <p>Copy <code>opensk_nrf52840_mdk_usb_dongle_gece14d7.uf2</code> image to MDK-DONGLE.</p> <p></p> <p>When programming is completed, the OpenSK will run automatically. The device named OpenSK will detected by the computer.</p> <p></p>"},{"location":"updates/getting-started-with-google-opensk/#test-opensk","title":"Test OpenSK","text":"<p>Now you can test the OpenSK via WebAuthn.io:</p>"},{"location":"updates/getting-started-with-google-opensk/#explore-more","title":"Explore More","text":"<p>The two-factor authentication (2FA) has been successfully deployed by a growing number of websites, including Google, social networks, cloud providers, and many others. Happy trying!</p>"},{"location":"updates/getting-started-with-google-opensk/#reference","title":"Reference","text":"<ul> <li>Google/OpenSK</li> <li>How to build OpenSK with nRF52840 MDK USB Dongle</li> </ul>"},{"location":"updates/imx-rt1011-nano-kit-is-here/","title":"iMX RT1011 Nano Kit is Here!","text":""},{"location":"updates/imx-rt1011-nano-kit-is-here/#overview","title":"Overview","text":"<p>We are excited to announce the iMX RT1011 Nano Kit, a small and high-performing prototyping kit designed around NXP's iMX RT1011 Crossover MCU based on the Arm Cortex-M7 core, which operates at speeds up to 500 MHz to provide high CPU performance and best real-time response.</p> <p>iMX RT1011 Nano Kit comes in the same form factor we first introduced in our nRF52840 Connect Kit, and provides external 128 Mbit QSPI flash with XIP support, flexible power management, programmable LED and Button, up to 33 multi-function GPIO pins (15 can be configured as ADC inputs) and Serial Wire Debug (SWD) port.</p> <p></p>"},{"location":"updates/imx-rt1011-nano-kit-is-here/#imx-rt1011-crossover-mcu","title":"iMX RT1011 Crossover MCU","text":"<p>The iMX RT1011 is a member of NXP's iMX RT real-time processor family based on the Arm\u00ae Cortex\u00ae-M7 core, which operates at speeds up to 500 MHz to provide high CPU performance and best real-time response. It has 128 KB on-chip RAM that can be flexibly configured as TCM or general-purpose as well as numerous peripherals including high speed USB, UART, SPI, I2C, SAI, PWM, GPIO, ADC and etc to support a wide range of applications.</p> <p></p>"},{"location":"updates/imx-rt1011-nano-kit-is-here/#easy-firmware-update","title":"Easy firmware update","text":"<p>iMX RT1011 Nano Kit is shipped with the UF2 Bootloader, which is an easy-to-use and self-upgradable bootloader that can be used to update the firmware by just copying the .uf2-format images to the flash drive.</p> <p>In addition, you can always enter the ROM Serial Downloader even when the UF2 Bootloader gets corrupted somehow and use the MCUXpresso Secure Provisioning Tool to build and write the images to the board.</p>"},{"location":"updates/imx-rt1011-nano-kit-is-here/#zephyr-rtos-support","title":"Zephyr RTOS support","text":"<p>The Zephyr Project is a Linux Foundation hosted Collaboration Project. It\u2019s an open-source collaborative effort uniting developers and users in building a best-in-class small, scalable real\u2043time operating system (RTOS) optimized for resource-constrained devices, across multiple architectures.</p> <p>Zephyr RTOS support is available on iMX RT1011 Nano Kit. To quickly get started with the Zephyr RTOS application development, refer to our Develop with Zephyr RTOS guide.</p>"},{"location":"updates/imx-rt1011-nano-kit-is-here/#circuitpython-support","title":"CircuitPython support","text":"<p>Python is a high-level programming language which means it's designed to be easier to read, write and maintain. It has a built-in interpreter which means there are no extra steps, like compiling, to get your code to work.</p> <p>iMX RT1011 Nano Kit can run CircuitPython which allows you to access hardware-specific functionality and peripherals with Python programming language. With CircuitPython, there are no upfront desktop downloads needed. Once you get your board set up, open any text editor, and start editing code. It's that simple. To get started with CircuitPython, check our Code in Python guide.</p>"},{"location":"updates/imx-rt1011-nano-kit-is-here/#get-involved","title":"Get Involved","text":"<p>Interested in our brand new iMX RT1011 Nano Kit? You can get it from the official store or refer to our wiki page for more technical resources.</p>"},{"location":"updates/introducing-circuitpython/","title":"Introducing CircuitPython","text":""},{"location":"updates/introducing-circuitpython/#introducing-circuitpython","title":"Introducing CircuitPython","text":""},{"location":"updates/introducing-circuitpython/#what-is-circuitpython","title":"What is CircuitPython?","text":"<p>CircuitPython is a programming language designed to simplify experimenting and learning to program on low-cost microcontroller boards. It makes getting started easier than ever with no upfront desktop downloads needed. Once you get your board set up, open any text editor, and get started editing code. It's that simple.</p> <p>CircuitPython is an implementation of Python, which is a high-level programming language which means it's designed to be easier to read, write and maintain. It supports modules and packages which means it's easy to reuse your code for other projects. It has a built in interpreter which means there are no extra steps, like compiling, to get your code to work. And of course, it is Open Source Software which means it's free for anyone to use, modify or improve upon.</p>"},{"location":"updates/introducing-circuitpython/#why-circuitpython","title":"Why CircuitPython?","text":"<p>CircuitPython is a fork of MicroPython, and offers unified Python core APIs and a growing list of 300+ device libraries and drivers that work with it. You can see differences from MicroPython.</p> <p>Here is some reasons to use CircuitPython:</p> <ul> <li>You want to get up and running quickly. Create a file, edit your code, save the file, and it runs immediately. There is no compiling, no downloading and no uploading needed.</li> <li>You're new to programming. CircuitPython is designed with education in mind. It's easy to start learning how to program and you get immediate feedback from the board.</li> <li>Easily update your code. Since your code lives on the disk drive, you can edit it whenever you like, you can also keep multiple files around for easy experimentation.</li> <li>The serial console and REPL. These allow for live feedback from your code and interactive programming. File storage. The internal storage for CircuitPython makes it great for data-logging, playing audio clips, and otherwise interacting with files.</li> <li>Strong hardware support. CircuitPython has builtin support for microcontroller hardware features like digital I/O pins, hardware buses (UART, I2C, SPI), audio I/O, and other capabilities. There are also many libraries and drivers for sensors, breakout boards and other external components.</li> <li>It's Python! Python is the fastest-growing programming language. It's taught in schools and universities. CircuitPython is almost-completely compatible with Python. It simply adds hardware support.</li> </ul>"},{"location":"updates/introducing-circuitpython/#how-to-get-started","title":"How to get started?","text":"<p>To use CircuitPython, you need to choose a microcontroller board well supported by CircuitPython. There are 300+ boards that can run CircuitPython.</p> <p>The following boards from Makerdiary are supported by CircuitPython:</p> <ul> <li>nRF52840 Connect Kit</li> <li>nRF52840 MDK USB Dongle(we also have a w/Case version)</li> <li>nRF52840 M.2 Developer Kit</li> <li>M60 Mechanical Keyboard</li> <li>Pitaya Go</li> <li>nRF52840 MDK</li> </ul>"},{"location":"updates/introducing-interface-mcu/","title":"Introducing Interface MCU","text":""},{"location":"updates/introducing-interface-mcu/#introducing-interface-mcu","title":"Introducing Interface MCU","text":""},{"location":"updates/introducing-interface-mcu/#introduction","title":"Introduction","text":"<p>The nRF9151 Connect Kit comes with an on-board Interface MCU built using the nRF52820. The Interface MCU Firmware is running on the nRF52820. It implements a CMSIS-DAP interface for debugging and programming the nRF9151 SiP. It also exposes two USB CDC ACM devices, one acts as a UART bridge between the host and the nRF9151 SiP, the other enables an Interface Shell for accessing board-specific functionality such as battery charger settings.</p> <p>The Interface MCU also comes pre-programmed with the UF2 Bootloader, an easy-to-use and self-upgradable bootloader that can be used to update the firmware by just copying the .uf2-format images to the flash drive without using an external programmer.</p> <p>The following figure describes the functional architecture of the Interface MCU:</p> <p></p>"},{"location":"updates/introducing-interface-mcu/#why-choose-the-nrf52820","title":"Why Choose the nRF52820","text":"<p>The nRF52820, with its rich feature set and low-power design, is an excellent choice for implementing an Interface MCU.</p> <ul> <li>Low Power Consumption: Ultra-low power is in Nordic's DNA. The nRF52820 draws less than 1 \u00b5A in System OFF mode, making it an ideal choice for battery-powered applications.</li> <li>High Performance: The nRF52820 features a 64 MHz Arm Cortex-M4 processor with 256 KB Flash and 32 KB RAM.</li> <li>Full Speed USB 2.0: The nRF52820 integrates a USB 2.0 full speed (12 Mbps) controller, which allows the SoC to support multiple functions, such as HID and CDC, simultaneously.</li> <li>Cost-Effective: The nRF52820 integrates many features into a single chip, reducing the need for additional external components. This integration lowers the overall Bill of Materials (BOM).</li> <li>Comprehensive Development Ecosystem: Compatible with Nordic\u2019s nRF Connect SDK. This makes it easier to develop and debug applications.</li> </ul>"},{"location":"updates/introducing-interface-mcu/#getting-started-with-the-interface-mcu","title":"Getting Started with the Interface MCU","text":"<p>The Interface MCU firmware is open source, and detailed documentation is available to help you get started.</p> <ul> <li>Interface MCU Firmware Source Code</li> <li>Interface MCU Firmware Documentation</li> </ul>"},{"location":"updates/introducing-nrf-cloud/","title":"Introducing nRF Cloud","text":""},{"location":"updates/introducing-nrf-cloud/#introducing-nrf-cloud","title":"Introducing nRF Cloud","text":""},{"location":"updates/introducing-nrf-cloud/#what-is-nrf-cloud","title":"What is nRF Cloud?","text":"<p>nRF Cloud is a comprehensive cloud platform tailored for IoT developers. It bridges the gap between IoT devices and the cloud, offering a suite of services that streamline the entire development lifecycle. Whether you\u2019re building a small-scale prototype or a large-scale deployment, nRF Cloud provides the infrastructure and tools to make your IoT vision a reality.</p> <p></p>"},{"location":"updates/introducing-nrf-cloud/#key-features-of-nrf-cloud","title":"Key Features of nRF Cloud","text":"<ul> <li> <p>Device Management: Easily onboard, monitor, and manage your IoT devices at scale. Track device health, connectivity status, and performance in real-time.</p> </li> <li> <p>Data Visualization: Transform raw sensor data into actionable insights with customizable dashboards. Visualize trends, anomalies, and key metrics to make informed decisions.</p> </li> <li> <p>Over-the-Air (OTA) Updates: Securely deploy firmware updates to devices in the field, ensuring they stay up-to-date with the latest features and security patches.</p> </li> <li> <p>Seamless Integration: Fully compatible with Nordic\u2019s nRF91 Series and nRF Connect SDK.</p> </li> <li> <p>Security: Built-in security features, including end-to-end encryption and secure boot, protect your devices and data from threats.</p> </li> <li> <p>Scalability: Allow you to seamlessly scale from a few devices on a pilot run to thousands of devices on a production deployment.</p> </li> </ul>"},{"location":"updates/introducing-nrf-cloud/#benefits-of-nrf-cloud","title":"Benefits of nRF Cloud","text":"<ul> <li> <p>Built from the ground-up for low power: Ultra-low power is in Nordic's DNA. Everything we offer to our customers across hardware, software and cloud services, is optimized for ultra-low power. </p> </li> <li> <p>Agnostic connectivity transport: nRF Cloud can be accessed via device-to-cloud or cloud-to-cloud mechanisms, to ensure it fits a variety of use-cases and system architectures.</p> </li> <li> <p>Standalone services and pricing: Individual selection of services and features allows for a flexible adoption that meets your needs, and pricing plan options that fit the scale of your business.</p> </li> <li> <p>Full lifecycle support: nRF Cloud services can be leveraged across your product's entire lifecycle, from production to field decommissioning, reducing costs associated with proprietary infrastructure.</p> </li> </ul>"},{"location":"updates/introducing-nrf-cloud/#getting-started-with-nrf-cloud","title":"Getting Started with nRF Cloud","text":"<p>We think the best way to learn is by doing. We provides the following samples that help you to get started with nRF Cloud on the nRF9151 Connect Kit.</p> <ul> <li> <p>nRF Cloud Device Provisioning</p> <p>Demonstrate how to use the nRF Cloud device provisioning service.</p> </li> <li> <p>nRF Cloud REST Device Message</p> <p>Demonstrate how to use the nRF Cloud REST API to send Device Messages.</p> </li> <li> <p>nRF Cloud Multi-service</p> <p>Demonstrate how to integrate multiple nRF Cloud services.</p> </li> </ul>"},{"location":"updates/meet-m60-mechanical-keyboard/","title":"Meet M60 Mechanical Keyboard","text":""},{"location":"updates/meet-m60-mechanical-keyboard/#meet-m60-mechanical-keyboard","title":"Meet M60 Mechanical Keyboard","text":"<p>A few months ago, we made a hand-wired keyboard powered by Python, which attracted a lot of attention. Lots of people love it, some question it. With putting more time into the Python keyboard, we find it more and more interesting. We think a Python keyboard can make a big difference, so we decided to design a new keyboard for everyone. It's called M60.</p> <p>Designing a new keyboard is a step by step process. Now, we has finished keyboard PCBA design. We would like to share the process and some ideas behind it with you.</p> <p>The hand-wired keyboard is a typical prototype. It is a working keyboard and can be used to do some function tests. It has got some feedback. From these feedback, we know that soldering a keyboard is a really hard for most people, so M60 is a solder-free keyboard. It has hot-swapping sockets which makes it super easy to change mechanical switches. You will be able to choose your favorite type of mechanical switches.</p> <p></p> <p>With modular design in mind, we designed an M2 module as the core of the keyboard. It is a practice of design for manufacturing, which also improve its repairability.</p> <p>With Python, the keyboard has very unique features. With no need to download any software or setup a development environment, we can just use a text editor to configure the keyboard or to add a new function. Meanwhile, it also has some disadvantages. Comparing to C, Python is slower, it requires more powerful hardware and has higher power consumption.</p> <p>Besides, the keyboard is powerful enough to run Python, will also be able to run C/C++, Rust, Go (TinyGo) and JavaScript (JerryScript). The hardware is also optimized for power efficiency.</p> <p>We always want to get you involved. If you're also interested in the Python keyboard, you can share your idea with us.</p>"},{"location":"updates/nrf52840-connect-kit-is-here/","title":"nRF52840 Connect Kit is Here!","text":""},{"location":"updates/nrf52840-connect-kit-is-here/#nrf52840-connect-kit-is-here","title":"nRF52840 Connect Kit is Here!","text":"<p>We are excited to announce that nRF52840 Connect Kit is now available! It's a new member of our nRF52840-based prototyping kit family. It comes in a more mainstream form factor with USB-C and 40 pin DIP/SMT type. A new power architecture is introduced to support various options for easily powering the unit from USB, external supplies or batteries. We will also offer Chip antenna or U.FL receptacle option for selection.</p> <p></p> <p>With nRF52840 Connect Kit you can quickly and easily build your next connected project supporting Bluetooth LE, Bluetooth mesh, NFC, Thread, Zigbee, 802.15.4, ANT and 2.4 GHz proprietary stacks. Easy-to-use form factor, USB-C, 64 Mbit QSPI flash, flexible power management and a rich set of features enable designs to meet a wide range of applications.</p> <p>About nRF52840</p> <p>The nRF52840 SoC is the most advanced member of the nRF52 Series. It meets the challenges of sophisticated applications that need protocol concurrency and a rich and varied set of peripherals and features. It offers generous memory availability for both Flash and RAM, which are prerequisites for such demanding applications.</p> <p>The nRF52840 is fully multiprotocol capable with full protocol concurrency. It has protocol support for Bluetooth LE, Bluetooth mesh, Thread, Zigbee, 802.15.4, ANT and 2.4 GHz proprietary stacks.</p> <p>nRF52840 Connect Kit has support for Nordic Semi's nRF Connect SDK, which integrates the Zephyr RTOS, protocol stacks, samples, hardware drivers and much more. We also offer Python support, allowing you access hardware-specific functionality and peripherals with Python programming language.</p> <p>In addition, we offer an extensive set of documentation such as out of box experience, getting started and developer guides, which can help you save big by reducing development effort.</p> <p>Interested in our brand new nRF52840 Connect Kit? You can get it from the official store or refer to our wiki page for more technical resources.</p>"},{"location":"updates/nrf9151-connect-kit-is-here/","title":"nRF9151 Connect Kit is Here!","text":""},{"location":"updates/nrf9151-connect-kit-is-here/#nrf9151-connect-kit-is-here","title":"nRF9151 Connect Kit is Here!","text":""},{"location":"updates/nrf9151-connect-kit-is-here/#introduction","title":"Introduction","text":"<p>Today we are excited to launch our latest IoT prototyping kit, the nRF9151 Connect Kit, for LTE-M, NB-IoT, DECT NR+, and GNSS applications. The nRF9151 Connect Kit comes with on-board Interface MCU for debug and programming, flexible power management with battery charger, easy-to-use form factor, nRF Connect SDK support including the Zephyr RTOS, various samples and documentation. It\u2019s designed to help developers quickly prototype and deploy Cellular IoT applications with minimal effort.</p>"},{"location":"updates/nrf9151-connect-kit-is-here/#why-choose-the-nrf9151-sip","title":"Why Choose the nRF9151 SiP","text":"<p>Like its predecessor, the nRF9161, the nRF9151 supports 3GPP release 14 LTE-M/NB-IoT global coverage and DECT NR+. The nRF9151 stands out from the nRF9160 and nRF9161 with its exclusive features, such as a significant footprint reduction, which allows for more compact products without performance compromises. In addition to Power class 3 (23 dBm), the nRF9151 also supports Power class 5 (20 dBm) output power, leading to 45 percent reduced peak power consumption thanks to the unique nRF9151 low power design, which decreases the cost of battery-powered products. The nRF9151 will also add support for Non-Terrestrial Network (NTN) support in a future firmware release.  </p>"},{"location":"updates/nrf9151-connect-kit-is-here/#key-features-of-the-nrf9151-connect-kit","title":"Key Features of the nRF9151 Connect Kit","text":"<ul> <li>Global Cellular Connectivity: Supports LTE-M and NB-IoT networks, ensuring reliable connectivity worldwide.</li> <li>Integrated GNSS: Built-in Global Navigation Satellite System (GNSS) enables precise location tracking for applications like asset tracking.</li> <li>On-board Interface MCU: Built-in CMSIS-DAP support for debug, programming as well as modem firmware update, no need for any external tools.</li> <li>Ultra-Low Power Design: Optimized for battery-powered devices, the kit ensures long operational life, making it ideal for remote and hard-to-reach deployments.</li> <li>Built on Open Source: Compatible with Nordic\u2019s nRF Connect SDK, including the Zephyr RTOS, various samples, networking protocols, libraries, and hardware drivers, all essential for cellular IoT development.</li> </ul>"},{"location":"updates/nrf9151-connect-kit-is-here/#join-the-cellular-iot-revolution","title":"Join the Cellular IoT Revolution","text":"<p>The nRF9151 Connect Kit is here to help you unlock the full potential of cellular IoT. With its advanced features and user-friendly design, it\u2019s the perfect platform for developers looking to innovate and lead in the low power Cellular IoT space.</p> <p>Get your nRF9151 Connect Kit today and start building the future of connected devices!</p>"},{"location":"updates/programming-nrf5x-socs-with-pitaya-link/","title":"Programming nRF5x SoCs with Pitaya-Link","text":""},{"location":"updates/programming-nrf5x-socs-with-pitaya-link/#programming-nrf5x-socs-with-pitaya-link","title":"Programming nRF5x SoCs with Pitaya-Link","text":""},{"location":"updates/programming-nrf5x-socs-with-pitaya-link/#introduction","title":"Introduction","text":"<p>Pitaya-Link is a low-cost debug probe based on the CMSIS-DAP (also known as DAPLink) protocol standard. It can be used to program and debug the application software running on Arm Cortex Microcontrollers.</p> <p>The design enables developers with Drag-And-Drop programming, Virtual COM Port, CMSIS-DAP compliant debug channel, and access to Arm Cortex Microcontrollers in the browser using WebUSB.</p> <p>The probe comes with indicator LEDs, a button to reset the target or trigger the firmware update, reversible USB-C connector and easy-to-use 7-pin 2.54mm Header.</p> <p>This post is intended to assist users in the initial setup and demonstration of programming Nordic's nRF5x SoCs with Pitaya-Link.</p>"},{"location":"updates/programming-nrf5x-socs-with-pitaya-link/#what-youll-need","title":"What you'll need","text":"<ul> <li>A Pitaya-Link Debug Probe</li> <li>A macOS/Linux/Windows PC</li> <li>An nRF52 target board(e.g. nRF52840 MDK USB Dongle)</li> </ul>"},{"location":"updates/programming-nrf5x-socs-with-pitaya-link/#installing-pyocd","title":"Installing pyOCD","text":"<p>pyOCD is an open source Python package for programming and debugging Arm Cortex-M microcontrollers using multiple supported types of USB debug probes. It is fully cross-platform, with support for Linux, macOS, and Windows.</p> <p>The latest stable version of pyOCD may be installed via pip as follows:</p> <pre><code>python3 -mpip install -U pyocd\n</code></pre> <p>Alternatively, you can install the latest prerelease version from the HEAD of the <code>develop</code> branch, you can do the following:</p> <pre><code>$ python3 -mpip install --pre -U git+https://github.com/pyocd/pyOCD.git@develop\n</code></pre> <p>Verify if pyOCD works correctly in your terminal:</p> <pre><code>pyocd --version\n</code></pre>"},{"location":"updates/programming-nrf5x-socs-with-pitaya-link/#connecting-the-target","title":"Connecting the target","text":"<p>Perform the following steps to connect your nRF5x target board:</p> <ol> <li>Connect the target board to Pitaya-Link using the provided 7-pin Cable.</li> <li>Connect Pitaya-Link to the PC using the provided USB-C Cable.</li> <li>A disk drive called PITAYA-LINK will be automatically detected by the computer.</li> </ol> <p></p>"},{"location":"updates/programming-nrf5x-socs-with-pitaya-link/#programming","title":"Programming","text":"<p>Pitaya-Link allows programming of your target MCU in the following two very simple ways:</p> <ul> <li>Intuitive Drag-And-Drop programming</li> <li>Using the <code>pyocd</code> executable</li> </ul>"},{"location":"updates/programming-nrf5x-socs-with-pitaya-link/#drag-and-drop-programming","title":"Drag-and-drop programming","text":"<p>Drag-And-Drop is an optional intuitive programming feature. It allows programming of your target MCU by dragging and dropping a file ( <code>.hex</code> -format) onto the PITAYA-LINK drive.</p> <p>There is no need to install application software. Anyone that can drag and drop a file to a USB memory stick can now program the target board.</p> <p></p>"},{"location":"updates/programming-nrf5x-socs-with-pitaya-link/#using-the-pyocd-executable","title":"Using the pyocd executable","text":"<p>The <code>pyocd</code> command line tool gives you total control over your device with these subcommands:</p> <ul> <li><code>gdbserver</code>: GDB remote server allows you to debug using gdb via either the console or several GUI debugger options.</li> <li><code>load</code>: Program files of various formats into flash or RAM.</li> <li><code>erase</code>: Erase part or all of an MCU's flash memory.</li> <li><code>pack</code>: Manage CMSIS Device Family Packs that provide additional target device support.</li> <li><code>commander</code>: Interactive REPL control and inspection of the MCU.</li> <li><code>server</code>: Share a debug probe with a TCP/IP server.</li> <li><code>reset</code>: Hardware or software reset of a device.</li> <li><code>rtt</code>: Stream Segger RTT IO with any debug probe.</li> <li><code>list</code>: Show connected devices.</li> </ul> <p>You can get additional help by adding <code>--help</code> option.</p> <p>To load/erase the nRF52840-based target, open up a terminal and run:</p> Load <code>.hex</code>Load <code>.bin</code>Chip Erase <pre><code>pyocd load -t nrf52840 firmware.hex\n</code></pre> <pre><code>pyocd load -t nrf52840 --base-address 0x1000 firmware.bin\n</code></pre> <pre><code>pyocd erase -t nrf52840 --chip\n</code></pre>"},{"location":"updates/programming-nrf5x-socs-with-pitaya-link/#explore-further","title":"Explore Further","text":"<p>Now that you are familiar with the Pitaya-Link, it's time to explore more tutorials available below:</p> <ul> <li>Using Pitaya-Link with DAP.js</li> <li>Using Pitaya-Link with Visual Studio Code</li> <li>Using Pitaya-Link with GNU MCU Eclipse</li> <li>Using Pitaya-Link with KEIL \u00b5Vision IDE</li> <li>Using Pitaya-Link with IAR Embedded Workbench</li> <li>Upgrading the DAPLink Firmware</li> <li>Building your own DAPLink Firmware</li> </ul>"},{"location":"updates/page/2/","title":"Latest Updates","text":""}]}